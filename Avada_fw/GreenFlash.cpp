/*
 * GreenFlash.cpp
 *
 *  Created on: 12 апр. 2022 г.
 *      Author: layst
 */

#include "GreenFlash.h"
#include "Settings.h"
#include "buzzer.h"
#include "kl_lib.h"
#include "adcF072.h"
#include "shell.h"
#include "MsgQ.h"
#include "EvtMsgIDs.h"

static TmrKL_t ITmr {999, evtIdDelayEnd, tktOneShot}; // Delay is dummy
static virtual_timer_t FlashTmr;
uint16_t DacValue;
bool IsOn = false;
uint32_t IMax;
static enum {staCharging, staReady, staWaitingBtnPress, staBeforeFlash, staDelayBeforeRestart} State;

void SetDac(uint16_t v) { DAC->DHR12R1 = v; }

void FlashCallbackI(virtual_timer_t *vtp, void *p) {
    chSysLockFromISR();
    IsOn = false;
    SetDac(0);
    Adc.Stop();
    EvtQMain.SendNowOrExitI(EvtMsg_t(evtIdFlashEnd));
    chSysUnlockFromISR();
}

void Fire() {
    Printf("Fire\r");
    IMax=0;
    DacValue = LED_DAC_START;
    Adc.StartPeriodicMeasurement(2000);
    SetDac(DacValue);
    IsOn = true;
    Buzzer.Off();
    chVTSet(&FlashTmr, TIME_MS2I(Settings.FlashDuration_ms.Value), FlashCallbackI, nullptr);
}

void EnterDelayBeforeRestart() {
    State = staDelayBeforeRestart;
    Buzzer.SetVolume(Settings.Volume.BeforeRestart.Value);
    Buzzer.BeWaitingRestart();
    // Start DelayBeforeRestart timeout. Will end immediately if 0.
    ITmr.StartOrRestart(TIME_S2I(Settings.Delay.BeforeRestart.Value));
}

void EnterCharging() {
//    Settings.Load();
    Buzzer.SetVolume(Settings.Volume.Charging.Value);
    Buzzer.BuzzUp();
    State = staCharging;
    ITmr.Stop(); // End event generated by buzzer
}

void EnterReady() {
    State = staReady;
    Buzzer.SetVolume(Settings.Volume.Ready.Value);
    Buzzer.BeReady();
    // Start Ready2Press timeout. Will end immediately if 0.
    ITmr.StartOrRestart(TIME_S2I(Settings.Delay.Ready2Press.Value));
}

namespace GreenFlash {

void Init() {
    PinSetupAnalog(GREEN_LED);
    // Init DAC
    rccEnableDAC1(FALSE);
    DAC->CR = DAC_CR_EN1;
    DAC->DHR12R1 = 0;
    // Set initial state
    if(Settings.Delay.Start2Ready.Value == 0) EnterReady();
    else EnterCharging();
}

void OnDelayEnd() {
//    Printf("DE: %u\r", State);
    switch(State) {
        case staCharging: EnterReady(); break; // End event generated by buzzer, not timer, but who cares

        case staReady:
            State = staWaitingBtnPress;
            Buzzer.SetVolume(Settings.Volume.WaitingBtn.Value);
            Buzzer.BeReady();
            // Start OffIfNotFired timeout if not 0. If 0 - do not start and wait forever.
            if(Settings.Delay.OffIfNotFired.Value != 0) ITmr.StartOrRestart(TIME_S2I(Settings.Delay.OffIfNotFired.Value));
            break;

        case staWaitingBtnPress: EnterDelayBeforeRestart(); break; // NotFired timeout occured
        case staBeforeFlash: Fire(); break; // Time to fire
        case staDelayBeforeRestart: EnterCharging(); break;  // Delay ended
    } // switch
}

void OnFlashEnd() {
    Printf("IMax: %u\r", IMax);
    EnterDelayBeforeRestart();
}

void OnBtnPress() {
    if(State == staWaitingBtnPress) {
        State = staBeforeFlash;
        Buzzer.SetVolume(Settings.Volume.BeforeFlash.Value);
        Buzzer.BeReady();
        // Start BeforeFlash timeout. Will end immediately if 0.
        ITmr.StartOrRestart(TIME_S2I(Settings.Delay.BeforeFlash.Value));
    }
}

void AdjustCurrent(uint32_t ILed) {
    if(IsOn) {
        if(ILed > ILED_TARGET_mA and DacValue >= DAC_ADJ_STEP) DacValue -= DAC_ADJ_STEP;
        else if(DacValue < (4095U - DAC_ADJ_STEP)) DacValue += DAC_ADJ_STEP;
        SetDac(DacValue);
        if(ILed > IMax) IMax = ILed;
//        PrintfI("%u %u\r", ILed, DacValue);
    }
}

} // namespace
